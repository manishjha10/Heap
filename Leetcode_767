import java.util.*;

class Solution {
    public String reorganizeString(String s) {
        // Step 1: count frequency of each character
        Map<Character, Integer> freq = new HashMap<>();
        for (char c : s.toCharArray()) {
            freq.put(c, freq.getOrDefault(c, 0) + 1);
        }

        // Step 2: max-heap (highest frequency char at top)
        PriorityQueue<Character> pq = new PriorityQueue<>(
            (a, b) -> freq.get(b) - freq.get(a)
        );
        pq.addAll(freq.keySet());

        // Step 3: build the result
        StringBuilder sb = new StringBuilder();
        while (pq.size() > 1) {
            // take top 2 different chars
            char first = pq.poll();
            char second = pq.poll();

            sb.append(first);
            sb.append(second);

            // decrease freq and push back if still > 0
            freq.put(first, freq.get(first) - 1);
            freq.put(second, freq.get(second) - 1);

            if (freq.get(first) > 0) pq.add(first);
            if (freq.get(second) > 0) pq.add(second);
        }

        // Step 4: if one char left
        if (!pq.isEmpty()) {
            char last = pq.poll();
            if (freq.get(last) > 1) return ""; // not possible
            sb.append(last);
        }

        return sb.toString();
    }
}
