class Solution {
    public int[][] kClosest(int[][] points, int k) {
//       PriorityQueue<int[]> qp = new PriorityQueue<>(
//     (a, b) -> (b[0]*b[0] + b[1]*b[1]) - (a[0]*a[0] + a[1]*a[1])
// );

//        for(int[] p : points)
//        {
//           qp.add(p);
//           if(qp.size() > k)
//           {
//             qp.poll();
//           }
//        }
       
//        int[][] res = new int[k][2];
//        for(int i=0; i<k; i++)
//        {
//         res[i] = qp.poll(); 
//        }
//      return res; 

Arrays.sort(points, (a, b) -> 
    (a[0]*a[0] + a[1]*a[1]) - (b[0]*b[0] + b[1]*b[1])
);

int[][] res = new int[k][2];
for (int i = 0; i < k; i++) {
    res[i] = points[i];
}
return res; 
    }
}    
